
blinking-light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de8  08002de8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002df0  08002df0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002e04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002e04  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094a9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001660  00000000  00000000  000294e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002ab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002b518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209ee  00000000  00000000  0002be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b319  00000000  00000000  0004c81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca3d8  00000000  00000000  00057b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121f0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a04  00000000  00000000  00121f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002dc0 	.word	0x08002dc0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002dc0 	.word	0x08002dc0

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2f>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a8:	bf24      	itt	cs
 80009aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b2:	d90d      	bls.n	80009d0 <__aeabi_d2f+0x30>
 80009b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c8:	bf08      	it	eq
 80009ca:	f020 0001 	biceq.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d4:	d121      	bne.n	8000a1a <__aeabi_d2f+0x7a>
 80009d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009da:	bfbc      	itt	lt
 80009dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	4770      	bxlt	lr
 80009e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ea:	f1c2 0218 	rsb	r2, r2, #24
 80009ee:	f1c2 0c20 	rsb	ip, r2, #32
 80009f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f6:	fa20 f002 	lsr.w	r0, r0, r2
 80009fa:	bf18      	it	ne
 80009fc:	f040 0001 	orrne.w	r0, r0, #1
 8000a00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a0c:	ea40 000c 	orr.w	r0, r0, ip
 8000a10:	fa23 f302 	lsr.w	r3, r3, r2
 8000a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a18:	e7cc      	b.n	80009b4 <__aeabi_d2f+0x14>
 8000a1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1e:	d107      	bne.n	8000a30 <__aeabi_d2f+0x90>
 8000a20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a24:	bf1e      	ittt	ne
 8000a26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2e:	4770      	bxne	lr
 8000a30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_uldivmod>:
 8000a40:	b953      	cbnz	r3, 8000a58 <__aeabi_uldivmod+0x18>
 8000a42:	b94a      	cbnz	r2, 8000a58 <__aeabi_uldivmod+0x18>
 8000a44:	2900      	cmp	r1, #0
 8000a46:	bf08      	it	eq
 8000a48:	2800      	cmpeq	r0, #0
 8000a4a:	bf1c      	itt	ne
 8000a4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a54:	f000 b974 	b.w	8000d40 <__aeabi_idiv0>
 8000a58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a60:	f000 f806 	bl	8000a70 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr

08000a70 <__udivmoddi4>:
 8000a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a74:	9d08      	ldr	r5, [sp, #32]
 8000a76:	4604      	mov	r4, r0
 8000a78:	468e      	mov	lr, r1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d14d      	bne.n	8000b1a <__udivmoddi4+0xaa>
 8000a7e:	428a      	cmp	r2, r1
 8000a80:	4694      	mov	ip, r2
 8000a82:	d969      	bls.n	8000b58 <__udivmoddi4+0xe8>
 8000a84:	fab2 f282 	clz	r2, r2
 8000a88:	b152      	cbz	r2, 8000aa0 <__udivmoddi4+0x30>
 8000a8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a8e:	f1c2 0120 	rsb	r1, r2, #32
 8000a92:	fa20 f101 	lsr.w	r1, r0, r1
 8000a96:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9a:	ea41 0e03 	orr.w	lr, r1, r3
 8000a9e:	4094      	lsls	r4, r2
 8000aa0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa4:	0c21      	lsrs	r1, r4, #16
 8000aa6:	fbbe f6f8 	udiv	r6, lr, r8
 8000aaa:	fa1f f78c 	uxth.w	r7, ip
 8000aae:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ab6:	fb06 f107 	mul.w	r1, r6, r7
 8000aba:	4299      	cmp	r1, r3
 8000abc:	d90a      	bls.n	8000ad4 <__udivmoddi4+0x64>
 8000abe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ac6:	f080 811f 	bcs.w	8000d08 <__udivmoddi4+0x298>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 811c 	bls.w	8000d08 <__udivmoddi4+0x298>
 8000ad0:	3e02      	subs	r6, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 f707 	mul.w	r7, r0, r7
 8000ae8:	42a7      	cmp	r7, r4
 8000aea:	d90a      	bls.n	8000b02 <__udivmoddi4+0x92>
 8000aec:	eb1c 0404 	adds.w	r4, ip, r4
 8000af0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000af4:	f080 810a 	bcs.w	8000d0c <__udivmoddi4+0x29c>
 8000af8:	42a7      	cmp	r7, r4
 8000afa:	f240 8107 	bls.w	8000d0c <__udivmoddi4+0x29c>
 8000afe:	4464      	add	r4, ip
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b06:	1be4      	subs	r4, r4, r7
 8000b08:	2600      	movs	r6, #0
 8000b0a:	b11d      	cbz	r5, 8000b14 <__udivmoddi4+0xa4>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c5 4300 	strd	r4, r3, [r5]
 8000b14:	4631      	mov	r1, r6
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d909      	bls.n	8000b32 <__udivmoddi4+0xc2>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	f000 80ef 	beq.w	8000d02 <__udivmoddi4+0x292>
 8000b24:	2600      	movs	r6, #0
 8000b26:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	fab3 f683 	clz	r6, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d14a      	bne.n	8000bd0 <__udivmoddi4+0x160>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xd4>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 80f9 	bhi.w	8000d36 <__udivmoddi4+0x2c6>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	469e      	mov	lr, r3
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0e0      	beq.n	8000b14 <__udivmoddi4+0xa4>
 8000b52:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b56:	e7dd      	b.n	8000b14 <__udivmoddi4+0xa4>
 8000b58:	b902      	cbnz	r2, 8000b5c <__udivmoddi4+0xec>
 8000b5a:	deff      	udf	#255	; 0xff
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f040 8092 	bne.w	8000c8a <__udivmoddi4+0x21a>
 8000b66:	eba1 010c 	sub.w	r1, r1, ip
 8000b6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6e:	fa1f fe8c 	uxth.w	lr, ip
 8000b72:	2601      	movs	r6, #1
 8000b74:	0c20      	lsrs	r0, r4, #16
 8000b76:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7a:	fb07 1113 	mls	r1, r7, r3, r1
 8000b7e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b82:	fb0e f003 	mul.w	r0, lr, r3
 8000b86:	4288      	cmp	r0, r1
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0x12c>
 8000b8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000b8e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b92:	d202      	bcs.n	8000b9a <__udivmoddi4+0x12a>
 8000b94:	4288      	cmp	r0, r1
 8000b96:	f200 80cb 	bhi.w	8000d30 <__udivmoddi4+0x2c0>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bac:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x156>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bbc:	d202      	bcs.n	8000bc4 <__udivmoddi4+0x154>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	f200 80bb 	bhi.w	8000d3a <__udivmoddi4+0x2ca>
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	eba4 040e 	sub.w	r4, r4, lr
 8000bca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bce:	e79c      	b.n	8000b0a <__udivmoddi4+0x9a>
 8000bd0:	f1c6 0720 	rsb	r7, r6, #32
 8000bd4:	40b3      	lsls	r3, r6
 8000bd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bde:	fa20 f407 	lsr.w	r4, r0, r7
 8000be2:	fa01 f306 	lsl.w	r3, r1, r6
 8000be6:	431c      	orrs	r4, r3
 8000be8:	40f9      	lsrs	r1, r7
 8000bea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bee:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bf6:	0c20      	lsrs	r0, r4, #16
 8000bf8:	fa1f fe8c 	uxth.w	lr, ip
 8000bfc:	fb09 1118 	mls	r1, r9, r8, r1
 8000c00:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c04:	fb08 f00e 	mul.w	r0, r8, lr
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	fa02 f206 	lsl.w	r2, r2, r6
 8000c0e:	d90b      	bls.n	8000c28 <__udivmoddi4+0x1b8>
 8000c10:	eb1c 0101 	adds.w	r1, ip, r1
 8000c14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c18:	f080 8088 	bcs.w	8000d2c <__udivmoddi4+0x2bc>
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	f240 8085 	bls.w	8000d2c <__udivmoddi4+0x2bc>
 8000c22:	f1a8 0802 	sub.w	r8, r8, #2
 8000c26:	4461      	add	r1, ip
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c30:	fb09 1110 	mls	r1, r9, r0, r1
 8000c34:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	458e      	cmp	lr, r1
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x1e2>
 8000c40:	eb1c 0101 	adds.w	r1, ip, r1
 8000c44:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c48:	d26c      	bcs.n	8000d24 <__udivmoddi4+0x2b4>
 8000c4a:	458e      	cmp	lr, r1
 8000c4c:	d96a      	bls.n	8000d24 <__udivmoddi4+0x2b4>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4461      	add	r1, ip
 8000c52:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c56:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5a:	eba1 010e 	sub.w	r1, r1, lr
 8000c5e:	42a1      	cmp	r1, r4
 8000c60:	46c8      	mov	r8, r9
 8000c62:	46a6      	mov	lr, r4
 8000c64:	d356      	bcc.n	8000d14 <__udivmoddi4+0x2a4>
 8000c66:	d053      	beq.n	8000d10 <__udivmoddi4+0x2a0>
 8000c68:	b15d      	cbz	r5, 8000c82 <__udivmoddi4+0x212>
 8000c6a:	ebb3 0208 	subs.w	r2, r3, r8
 8000c6e:	eb61 010e 	sbc.w	r1, r1, lr
 8000c72:	fa01 f707 	lsl.w	r7, r1, r7
 8000c76:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7a:	40f1      	lsrs	r1, r6
 8000c7c:	431f      	orrs	r7, r3
 8000c7e:	e9c5 7100 	strd	r7, r1, [r5]
 8000c82:	2600      	movs	r6, #0
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	f1c2 0320 	rsb	r3, r2, #32
 8000c8e:	40d8      	lsrs	r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa21 f303 	lsr.w	r3, r1, r3
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	4301      	orrs	r1, r0
 8000c9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca0:	fa1f fe8c 	uxth.w	lr, ip
 8000ca4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ca8:	fb07 3610 	mls	r6, r7, r0, r3
 8000cac:	0c0b      	lsrs	r3, r1, #16
 8000cae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb2:	fb00 f60e 	mul.w	r6, r0, lr
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x260>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cc6:	d22f      	bcs.n	8000d28 <__udivmoddi4+0x2b8>
 8000cc8:	429e      	cmp	r6, r3
 8000cca:	d92d      	bls.n	8000d28 <__udivmoddi4+0x2b8>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	b289      	uxth	r1, r1
 8000cd4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cd8:	fb07 3316 	mls	r3, r7, r6, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x28a>
 8000ce8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000cf0:	d216      	bcs.n	8000d20 <__udivmoddi4+0x2b0>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d914      	bls.n	8000d20 <__udivmoddi4+0x2b0>
 8000cf6:	3e02      	subs	r6, #2
 8000cf8:	4461      	add	r1, ip
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d00:	e738      	b.n	8000b74 <__udivmoddi4+0x104>
 8000d02:	462e      	mov	r6, r5
 8000d04:	4628      	mov	r0, r5
 8000d06:	e705      	b.n	8000b14 <__udivmoddi4+0xa4>
 8000d08:	4606      	mov	r6, r0
 8000d0a:	e6e3      	b.n	8000ad4 <__udivmoddi4+0x64>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	e6f8      	b.n	8000b02 <__udivmoddi4+0x92>
 8000d10:	454b      	cmp	r3, r9
 8000d12:	d2a9      	bcs.n	8000c68 <__udivmoddi4+0x1f8>
 8000d14:	ebb9 0802 	subs.w	r8, r9, r2
 8000d18:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	e7a3      	b.n	8000c68 <__udivmoddi4+0x1f8>
 8000d20:	4646      	mov	r6, r8
 8000d22:	e7ea      	b.n	8000cfa <__udivmoddi4+0x28a>
 8000d24:	4620      	mov	r0, r4
 8000d26:	e794      	b.n	8000c52 <__udivmoddi4+0x1e2>
 8000d28:	4640      	mov	r0, r8
 8000d2a:	e7d1      	b.n	8000cd0 <__udivmoddi4+0x260>
 8000d2c:	46d0      	mov	r8, sl
 8000d2e:	e77b      	b.n	8000c28 <__udivmoddi4+0x1b8>
 8000d30:	3b02      	subs	r3, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	e732      	b.n	8000b9c <__udivmoddi4+0x12c>
 8000d36:	4630      	mov	r0, r6
 8000d38:	e709      	b.n	8000b4e <__udivmoddi4+0xde>
 8000d3a:	4464      	add	r4, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	e742      	b.n	8000bc6 <__udivmoddi4+0x156>

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <microDelay>:
uint32_t pMillis, cMillis;
float tCelcius = 0;
float tFarenheit = 0;
float RH = 0;

void microDelay(uint16_t delay) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <microDelay+0x30>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000d56:	bf00      	nop
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <microDelay+0x30>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d3f9      	bcc.n	8000d58 <microDelay+0x14>
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000028 	.word	0x20000028

08000d78 <DHT11_Start>:

uint8_t DHT11_Start(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
	GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000d90:	2302      	movs	r3, #2
 8000d92:	603b      	str	r3, [r7, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate);
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	482a      	ldr	r0, [pc, #168]	; (8000e50 <DHT11_Start+0xd8>)
 8000da6:	f000 fd2f 	bl	8001808 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2102      	movs	r1, #2
 8000dae:	4828      	ldr	r0, [pc, #160]	; (8000e50 <DHT11_Start+0xd8>)
 8000db0:	f000 fed6 	bl	8001b60 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000db4:	2014      	movs	r0, #20
 8000db6:	f000 fc1d 	bl	80015f4 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4824      	ldr	r0, [pc, #144]	; (8000e50 <DHT11_Start+0xd8>)
 8000dc0:	f000 fece 	bl	8001b60 <HAL_GPIO_WritePin>
	microDelay(30);
 8000dc4:	201e      	movs	r0, #30
 8000dc6:	f7ff ffbd 	bl	8000d44 <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate);
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481e      	ldr	r0, [pc, #120]	; (8000e50 <DHT11_Start+0xd8>)
 8000dd8:	f000 fd16 	bl	8001808 <HAL_GPIO_Init>
	microDelay(40);
 8000ddc:	2028      	movs	r0, #40	; 0x28
 8000dde:	f7ff ffb1 	bl	8000d44 <microDelay>
	if(!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) {
 8000de2:	2102      	movs	r1, #2
 8000de4:	481a      	ldr	r0, [pc, #104]	; (8000e50 <DHT11_Start+0xd8>)
 8000de6:	f000 fea3 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10b      	bne.n	8000e08 <DHT11_Start+0x90>
		microDelay(80);
 8000df0:	2050      	movs	r0, #80	; 0x50
 8000df2:	f7ff ffa7 	bl	8000d44 <microDelay>
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) Response = 1;
 8000df6:	2102      	movs	r1, #2
 8000df8:	4815      	ldr	r0, [pc, #84]	; (8000e50 <DHT11_Start+0xd8>)
 8000dfa:	f000 fe99 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <DHT11_Start+0x90>
 8000e04:	2301      	movs	r3, #1
 8000e06:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 8000e08:	f000 fbe8 	bl	80015dc <HAL_GetTick>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <DHT11_Start+0xdc>)
 8000e10:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 8000e12:	f000 fbe3 	bl	80015dc <HAL_GetTick>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <DHT11_Start+0xe0>)
 8000e1a:	6013      	str	r3, [r2, #0]
	while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 1 > cMillis) {
 8000e1c:	e004      	b.n	8000e28 <DHT11_Start+0xb0>
		cMillis = HAL_GetTick();
 8000e1e:	f000 fbdd 	bl	80015dc <HAL_GetTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <DHT11_Start+0xe0>)
 8000e26:	6013      	str	r3, [r2, #0]
	while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 1 > cMillis) {
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4809      	ldr	r0, [pc, #36]	; (8000e50 <DHT11_Start+0xd8>)
 8000e2c:	f000 fe80 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <DHT11_Start+0xcc>
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <DHT11_Start+0xdc>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <DHT11_Start+0xe0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8ec      	bhi.n	8000e1e <DHT11_Start+0xa6>
	}
	return Response;
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40020800 	.word	0x40020800
 8000e54:	20000078 	.word	0x20000078
 8000e58:	2000007c 	.word	0x2000007c

08000e5c <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	uint8_t a,b;
	for(a = 0; a < 8; a++) {
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	e063      	b.n	8000f30 <DHT11_Read+0xd4>
		pMillis = HAL_GetTick();
 8000e68:	f000 fbb8 	bl	80015dc <HAL_GetTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a34      	ldr	r2, [pc, #208]	; (8000f40 <DHT11_Read+0xe4>)
 8000e70:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8000e72:	f000 fbb3 	bl	80015dc <HAL_GetTick>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a32      	ldr	r2, [pc, #200]	; (8000f44 <DHT11_Read+0xe8>)
 8000e7a:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000e7c:	e004      	b.n	8000e88 <DHT11_Read+0x2c>
			cMillis = HAL_GetTick();
 8000e7e:	f000 fbad 	bl	80015dc <HAL_GetTick>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4a2f      	ldr	r2, [pc, #188]	; (8000f44 <DHT11_Read+0xe8>)
 8000e86:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000e88:	2102      	movs	r1, #2
 8000e8a:	482f      	ldr	r0, [pc, #188]	; (8000f48 <DHT11_Read+0xec>)
 8000e8c:	f000 fe50 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d106      	bne.n	8000ea4 <DHT11_Read+0x48>
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <DHT11_Read+0xe4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	1c9a      	adds	r2, r3, #2
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <DHT11_Read+0xe8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8ec      	bhi.n	8000e7e <DHT11_Read+0x22>
		}
		microDelay(40);
 8000ea4:	2028      	movs	r0, #40	; 0x28
 8000ea6:	f7ff ff4d 	bl	8000d44 <microDelay>
		if(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4826      	ldr	r0, [pc, #152]	; (8000f48 <DHT11_Read+0xec>)
 8000eae:	f000 fe3f 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10e      	bne.n	8000ed6 <DHT11_Read+0x7a>
			b&= ~(1<<(7-a));
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	b25a      	sxtb	r2, r3
 8000eca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	71bb      	strb	r3, [r7, #6]
 8000ed4:	e00b      	b.n	8000eee <DHT11_Read+0x92>
		}
		else {
			b|= (1<<(7-a));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f1c3 0307 	rsb	r3, r3, #7
 8000edc:	2201      	movs	r2, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	b25a      	sxtb	r2, r3
 8000ee4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	71bb      	strb	r3, [r7, #6]
		}
		pMillis = HAL_GetTick();
 8000eee:	f000 fb75 	bl	80015dc <HAL_GetTick>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <DHT11_Read+0xe4>)
 8000ef6:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8000ef8:	f000 fb70 	bl	80015dc <HAL_GetTick>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <DHT11_Read+0xe8>)
 8000f00:	6013      	str	r3, [r2, #0]
		while((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000f02:	e004      	b.n	8000f0e <DHT11_Read+0xb2>
			cMillis = HAL_GetTick();
 8000f04:	f000 fb6a 	bl	80015dc <HAL_GetTick>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <DHT11_Read+0xe8>)
 8000f0c:	6013      	str	r3, [r2, #0]
		while((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000f0e:	2102      	movs	r1, #2
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <DHT11_Read+0xec>)
 8000f12:	f000 fe0d 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d006      	beq.n	8000f2a <DHT11_Read+0xce>
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <DHT11_Read+0xe4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1c9a      	adds	r2, r3, #2
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <DHT11_Read+0xe8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d8ec      	bhi.n	8000f04 <DHT11_Read+0xa8>
	for(a = 0; a < 8; a++) {
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b07      	cmp	r3, #7
 8000f34:	d998      	bls.n	8000e68 <DHT11_Read+0xc>
		}
	}
	return b;
 8000f36:	79bb      	ldrb	r3, [r7, #6]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000078 	.word	0x20000078
 8000f44:	2000007c 	.word	0x2000007c
 8000f48:	40020800 	.word	0x40020800

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	ed2d 8b02 	vpush	{d8}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 fadc 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f8de 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 f998 	bl	8001290 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f60:	f000 f946 	bl	80011f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f64:	485f      	ldr	r0, [pc, #380]	; (80010e4 <main+0x198>)
 8000f66:	f001 fc19 	bl	800279c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DHT11_Start()) {
 8000f6a:	f7ff ff05 	bl	8000d78 <DHT11_Start>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80b1 	beq.w	80010d8 <main+0x18c>
		  RHI = DHT11_Read();
 8000f76:	f7ff ff71 	bl	8000e5c <DHT11_Read>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <main+0x19c>)
 8000f80:	701a      	strb	r2, [r3, #0]
		  RHD = DHT11_Read();
 8000f82:	f7ff ff6b 	bl	8000e5c <DHT11_Read>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b58      	ldr	r3, [pc, #352]	; (80010ec <main+0x1a0>)
 8000f8c:	701a      	strb	r2, [r3, #0]
		  TCI = DHT11_Read();
 8000f8e:	f7ff ff65 	bl	8000e5c <DHT11_Read>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <main+0x1a4>)
 8000f98:	701a      	strb	r2, [r3, #0]
		  TCD = DHT11_Read();
 8000f9a:	f7ff ff5f 	bl	8000e5c <DHT11_Read>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b54      	ldr	r3, [pc, #336]	; (80010f4 <main+0x1a8>)
 8000fa4:	701a      	strb	r2, [r3, #0]
		  SUM = DHT11_Read();
 8000fa6:	f7ff ff59 	bl	8000e5c <DHT11_Read>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b52      	ldr	r3, [pc, #328]	; (80010f8 <main+0x1ac>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		  if(RHI + RHD + TCI + TCD == SUM) {
 8000fb2:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <main+0x19c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <main+0x1a0>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a4c      	ldr	r2, [pc, #304]	; (80010f0 <main+0x1a4>)
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a4b      	ldr	r2, [pc, #300]	; (80010f4 <main+0x1a8>)
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a4b      	ldr	r2, [pc, #300]	; (80010f8 <main+0x1ac>)
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d14b      	bne.n	800106a <main+0x11e>
			  tCelcius = (float)TCI + (float)(TCD/10.0);
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <main+0x1a4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000fde:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <main+0x1a8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fa60 	bl	80004a8 <__aeabi_i2d>
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <main+0x1b0>)
 8000fee:	f7ff fbef 	bl	80007d0 <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fcd1 	bl	80009a0 <__aeabi_d2f>
 8000ffe:	ee07 0a90 	vmov	s15, r0
 8001002:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001006:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <main+0x1b4>)
 8001008:	edc3 7a00 	vstr	s15, [r3]
			  tFarenheit = tCelcius * 9/5 + 32;
 800100c:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <main+0x1b4>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001016:	ee27 7a87 	vmul.f32	s14, s15, s14
 800101a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001104 <main+0x1b8>
 8001026:	ee77 7a87 	vadd.f32	s15, s15, s14
 800102a:	4b37      	ldr	r3, [pc, #220]	; (8001108 <main+0x1bc>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
			  RH = (float)RHI + (float)(RHD/10.0);
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <main+0x19c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800103c:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <main+0x1a0>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa31 	bl	80004a8 <__aeabi_i2d>
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <main+0x1b0>)
 800104c:	f7ff fbc0 	bl	80007d0 <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fca2 	bl	80009a0 <__aeabi_d2f>
 800105c:	ee07 0a90 	vmov	s15, r0
 8001060:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <main+0x1c0>)
 8001066:	edc3 7a00 	vstr	s15, [r3]

		  }
		  if(TCI < 20) {
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <main+0x1a4>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b13      	cmp	r3, #19
 8001070:	d80f      	bhi.n	8001092 <main+0x146>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001072:	2201      	movs	r2, #1
 8001074:	2110      	movs	r1, #16
 8001076:	4826      	ldr	r0, [pc, #152]	; (8001110 <main+0x1c4>)
 8001078:	f000 fd72 	bl	8001b60 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2102      	movs	r1, #2
 8001080:	4823      	ldr	r0, [pc, #140]	; (8001110 <main+0x1c4>)
 8001082:	f000 fd6d 	bl	8001b60 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	4822      	ldr	r0, [pc, #136]	; (8001114 <main+0x1c8>)
 800108c:	f000 fd68 	bl	8001b60 <HAL_GPIO_WritePin>
 8001090:	e022      	b.n	80010d8 <main+0x18c>
		  }
		  else if(TCI < 25) {
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <main+0x1a4>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b18      	cmp	r3, #24
 8001098:	d80f      	bhi.n	80010ba <main+0x16e>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2110      	movs	r1, #16
 800109e:	481c      	ldr	r0, [pc, #112]	; (8001110 <main+0x1c4>)
 80010a0:	f000 fd5e 	bl	8001b60 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2102      	movs	r1, #2
 80010a8:	4819      	ldr	r0, [pc, #100]	; (8001110 <main+0x1c4>)
 80010aa:	f000 fd59 	bl	8001b60 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2101      	movs	r1, #1
 80010b2:	4818      	ldr	r0, [pc, #96]	; (8001114 <main+0x1c8>)
 80010b4:	f000 fd54 	bl	8001b60 <HAL_GPIO_WritePin>
 80010b8:	e00e      	b.n	80010d8 <main+0x18c>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2110      	movs	r1, #16
 80010be:	4814      	ldr	r0, [pc, #80]	; (8001110 <main+0x1c4>)
 80010c0:	f000 fd4e 	bl	8001b60 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2102      	movs	r1, #2
 80010c8:	4811      	ldr	r0, [pc, #68]	; (8001110 <main+0x1c4>)
 80010ca:	f000 fd49 	bl	8001b60 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2101      	movs	r1, #1
 80010d2:	4810      	ldr	r0, [pc, #64]	; (8001114 <main+0x1c8>)
 80010d4:	f000 fd44 	bl	8001b60 <HAL_GPIO_WritePin>
		  }
	  }
	  HAL_Delay(2000);
 80010d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010dc:	f000 fa8a 	bl	80015f4 <HAL_Delay>
	  if(DHT11_Start()) {
 80010e0:	e743      	b.n	8000f6a <main+0x1e>
 80010e2:	bf00      	nop
 80010e4:	20000028 	.word	0x20000028
 80010e8:	20000070 	.word	0x20000070
 80010ec:	20000071 	.word	0x20000071
 80010f0:	20000072 	.word	0x20000072
 80010f4:	20000073 	.word	0x20000073
 80010f8:	20000074 	.word	0x20000074
 80010fc:	40240000 	.word	0x40240000
 8001100:	20000080 	.word	0x20000080
 8001104:	42000000 	.word	0x42000000
 8001108:	20000084 	.word	0x20000084
 800110c:	20000088 	.word	0x20000088
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	; 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2234      	movs	r2, #52	; 0x34
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fe42 	bl	8002db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <SystemClock_Config+0xd0>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <SystemClock_Config+0xd0>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <SystemClock_Config+0xd0>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <SystemClock_Config+0xd4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <SystemClock_Config+0xd4>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	2310      	movs	r3, #16
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001188:	2300      	movs	r3, #0
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800118c:	2308      	movs	r3, #8
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001190:	2348      	movs	r3, #72	; 0x48
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001194:	2302      	movs	r3, #2
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001198:	2302      	movs	r3, #2
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800119c:	2302      	movs	r3, #2
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 f80b 	bl	80021c0 <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011b0:	f000 f8f8 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
 80011b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2302      	movs	r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2102      	movs	r1, #2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fcdf 	bl	8001b94 <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011dc:	f000 f8e2 	bl	80013a4 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3750      	adds	r7, #80	; 0x50
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_TIM1_Init+0x98>)
 800120e:	4a1f      	ldr	r2, [pc, #124]	; (800128c <MX_TIM1_Init+0x9c>)
 8001210:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_TIM1_Init+0x98>)
 8001214:	2247      	movs	r2, #71	; 0x47
 8001216:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_TIM1_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_TIM1_Init+0x98>)
 8001220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001224:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_TIM1_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_TIM1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_TIM1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM1_Init+0x98>)
 800123a:	f001 fa5f 	bl	80026fc <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 f8ae 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_TIM1_Init+0x98>)
 8001256:	f001 fb09 	bl	800286c <HAL_TIM_ConfigClockSource>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001260:	f000 f8a0 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_TIM1_Init+0x98>)
 8001272:	f001 fcfd 	bl	8002c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800127c:	f000 f892 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000028 	.word	0x20000028
 800128c:	40010000 	.word	0x40010000

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <MX_GPIO_Init+0x104>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a39      	ldr	r2, [pc, #228]	; (8001394 <MX_GPIO_Init+0x104>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <MX_GPIO_Init+0x104>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b33      	ldr	r3, [pc, #204]	; (8001394 <MX_GPIO_Init+0x104>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a32      	ldr	r2, [pc, #200]	; (8001394 <MX_GPIO_Init+0x104>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <MX_GPIO_Init+0x104>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <MX_GPIO_Init+0x104>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a2b      	ldr	r2, [pc, #172]	; (8001394 <MX_GPIO_Init+0x104>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <MX_GPIO_Init+0x104>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <MX_GPIO_Init+0x104>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a24      	ldr	r2, [pc, #144]	; (8001394 <MX_GPIO_Init+0x104>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <MX_GPIO_Init+0x104>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_SENSE_GPIO_Port, DHT11_SENSE_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2102      	movs	r1, #2
 800131a:	481f      	ldr	r0, [pc, #124]	; (8001398 <MX_GPIO_Init+0x108>)
 800131c:	f000 fc20 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_Pin|BlUE_LED_Pin|LED_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	2132      	movs	r1, #50	; 0x32
 8001324:	481d      	ldr	r0, [pc, #116]	; (800139c <MX_GPIO_Init+0x10c>)
 8001326:	f000 fc1b 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WHITE_LED_Pin|SENSOR_DHT_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f240 2101 	movw	r1, #513	; 0x201
 8001330:	481b      	ldr	r0, [pc, #108]	; (80013a0 <MX_GPIO_Init+0x110>)
 8001332:	f000 fc15 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_SENSE_Pin */
  GPIO_InitStruct.Pin = DHT11_SENSE_Pin;
 8001336:	2302      	movs	r3, #2
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4812      	ldr	r0, [pc, #72]	; (8001398 <MX_GPIO_Init+0x108>)
 800134e:	f000 fa5b 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin BlUE_LED_Pin LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|BlUE_LED_Pin|LED_Pin;
 8001352:	2332      	movs	r3, #50	; 0x32
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_GPIO_Init+0x10c>)
 800136a:	f000 fa4d 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : WHITE_LED_Pin SENSOR_DHT_Pin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin|SENSOR_DHT_Pin;
 800136e:	f240 2301 	movw	r3, #513	; 0x201
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_GPIO_Init+0x110>)
 8001388:	f000 fa3e 	bl	8001808 <HAL_GPIO_Init>

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40020800 	.word	0x40020800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_MspInit+0x4c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x4c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ee:	2007      	movs	r0, #7
 80013f0:	f000 f9d6 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_TIM_Base_MspInit+0x3c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10d      	bne.n	800142e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_TIM_Base_MspInit+0x40>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_TIM_Base_MspInit+0x40>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_TIM_Base_MspInit+0x40>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40010000 	.word	0x40010000
 8001440:	40023800 	.word	0x40023800

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f890 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <SystemInit+0x20>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <SystemInit+0x20>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014c2:	490e      	ldr	r1, [pc, #56]	; (80014fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c4:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d8:	4c0b      	ldr	r4, [pc, #44]	; (8001508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e6:	f7ff ffd7 	bl	8001498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f001 fc3d 	bl	8002d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7ff fd2d 	bl	8000f4c <main>
  bx  lr    
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001500:	08002df8 	.word	0x08002df8
  ldr r2, =_sbss
 8001504:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001508:	20000090 	.word	0x20000090

0800150c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_Init+0x40>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_Init+0x40>)
 8001526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_Init+0x40>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f931 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff ff34 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f93b 	bl	80017ee <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001590:	f000 f911 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	2000008c 	.word	0x2000008c

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	2000008c 	.word	0x2000008c

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffde 	bl	80015dc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff47 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff5c 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff8e 	bl	80016f4 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffb0 	bl	800175c <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e165      	b.n	8001af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 8154 	bne.w	8001aea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d005      	beq.n	800185a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001856:	2b02      	cmp	r3, #2
 8001858:	d130      	bne.n	80018bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0201 	and.w	r2, r3, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d017      	beq.n	80018f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80ae 	beq.w	8001aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a5c      	ldr	r2, [pc, #368]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <HAL_GPIO_Init+0x300>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019aa:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_GPIO_Init+0x304>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4f      	ldr	r2, [pc, #316]	; (8001b10 <HAL_GPIO_Init+0x308>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d025      	beq.n	8001a22 <HAL_GPIO_Init+0x21a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4e      	ldr	r2, [pc, #312]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01f      	beq.n	8001a1e <HAL_GPIO_Init+0x216>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4d      	ldr	r2, [pc, #308]	; (8001b18 <HAL_GPIO_Init+0x310>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d019      	beq.n	8001a1a <HAL_GPIO_Init+0x212>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <HAL_GPIO_Init+0x314>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d013      	beq.n	8001a16 <HAL_GPIO_Init+0x20e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4b      	ldr	r2, [pc, #300]	; (8001b20 <HAL_GPIO_Init+0x318>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00d      	beq.n	8001a12 <HAL_GPIO_Init+0x20a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4a      	ldr	r2, [pc, #296]	; (8001b24 <HAL_GPIO_Init+0x31c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d007      	beq.n	8001a0e <HAL_GPIO_Init+0x206>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a49      	ldr	r2, [pc, #292]	; (8001b28 <HAL_GPIO_Init+0x320>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_GPIO_Init+0x202>
 8001a06:	2306      	movs	r3, #6
 8001a08:	e00c      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e00a      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a0e:	2305      	movs	r3, #5
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a12:	2304      	movs	r3, #4
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a22:	2300      	movs	r3, #0
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a34:	4935      	ldr	r1, [pc, #212]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a66:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a90:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae4:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	f67f ae96 	bls.w	8001824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40021400 	.word	0x40021400
 8001b28:	40021800 	.word	0x40021800
 8001b2c:	40013c00 	.word	0x40013c00

08001b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e001      	b.n	8001b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b7c:	e003      	b.n	8001b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	619a      	str	r2, [r3, #24]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cc      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d90c      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b8      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	494d      	ldr	r1, [pc, #308]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d044      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d119      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e067      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4934      	ldr	r1, [pc, #208]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff fcaa 	bl	80015dc <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff fca6 	bl	80015dc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e04f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d20c      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e032      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4916      	ldr	r1, [pc, #88]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d1a:	f000 f821 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	490a      	ldr	r1, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fc0a 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00
 8001d50:	40023800 	.word	0x40023800
 8001d54:	08002dd8 	.word	0x08002dd8
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d64:	b0ae      	sub	sp, #184	; 0xb8
 8001d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d86:	4bcb      	ldr	r3, [pc, #812]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	f200 8206 	bhi.w	80021a0 <HAL_RCC_GetSysClockFreq+0x440>
 8001d94:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9a:	bf00      	nop
 8001d9c:	08001dd1 	.word	0x08001dd1
 8001da0:	080021a1 	.word	0x080021a1
 8001da4:	080021a1 	.word	0x080021a1
 8001da8:	080021a1 	.word	0x080021a1
 8001dac:	08001dd9 	.word	0x08001dd9
 8001db0:	080021a1 	.word	0x080021a1
 8001db4:	080021a1 	.word	0x080021a1
 8001db8:	080021a1 	.word	0x080021a1
 8001dbc:	08001de1 	.word	0x08001de1
 8001dc0:	080021a1 	.word	0x080021a1
 8001dc4:	080021a1 	.word	0x080021a1
 8001dc8:	080021a1 	.word	0x080021a1
 8001dcc:	08001fd1 	.word	0x08001fd1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dd0:	4bb9      	ldr	r3, [pc, #740]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001dd6:	e1e7      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dd8:	4bb8      	ldr	r3, [pc, #736]	; (80020bc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dde:	e1e3      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de0:	4bb4      	ldr	r3, [pc, #720]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dec:	4bb1      	ldr	r3, [pc, #708]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d071      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df8:	4bae      	ldr	r3, [pc, #696]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e04:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e1e:	4622      	mov	r2, r4
 8001e20:	462b      	mov	r3, r5
 8001e22:	f04f 0000 	mov.w	r0, #0
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	0159      	lsls	r1, r3, #5
 8001e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e30:	0150      	lsls	r0, r2, #5
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4621      	mov	r1, r4
 8001e38:	1a51      	subs	r1, r2, r1
 8001e3a:	6439      	str	r1, [r7, #64]	; 0x40
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e42:	647b      	str	r3, [r7, #68]	; 0x44
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e50:	4649      	mov	r1, r9
 8001e52:	018b      	lsls	r3, r1, #6
 8001e54:	4641      	mov	r1, r8
 8001e56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e5a:	4641      	mov	r1, r8
 8001e5c:	018a      	lsls	r2, r1, #6
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1a51      	subs	r1, r2, r1
 8001e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e64:	4649      	mov	r1, r9
 8001e66:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001e78:	4649      	mov	r1, r9
 8001e7a:	00cb      	lsls	r3, r1, #3
 8001e7c:	4641      	mov	r1, r8
 8001e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e82:	4641      	mov	r1, r8
 8001e84:	00ca      	lsls	r2, r1, #3
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	189b      	adds	r3, r3, r2
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
 8001e92:	462b      	mov	r3, r5
 8001e94:	460a      	mov	r2, r1
 8001e96:	eb42 0303 	adc.w	r3, r2, r3
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	024b      	lsls	r3, r1, #9
 8001eac:	4621      	mov	r1, r4
 8001eae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	024a      	lsls	r2, r1, #9
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ec4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ec8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ecc:	f7fe fdb8 	bl	8000a40 <__aeabi_uldivmod>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001eda:	e067      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001edc:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ee8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001efa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001efe:	4622      	mov	r2, r4
 8001f00:	462b      	mov	r3, r5
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	0159      	lsls	r1, r3, #5
 8001f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f10:	0150      	lsls	r0, r2, #5
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4621      	mov	r1, r4
 8001f18:	1a51      	subs	r1, r2, r1
 8001f1a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001f30:	4649      	mov	r1, r9
 8001f32:	018b      	lsls	r3, r1, #6
 8001f34:	4641      	mov	r1, r8
 8001f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	018a      	lsls	r2, r1, #6
 8001f3e:	4641      	mov	r1, r8
 8001f40:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f44:	4649      	mov	r1, r9
 8001f46:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f56:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f5e:	4692      	mov	sl, r2
 8001f60:	469b      	mov	fp, r3
 8001f62:	4623      	mov	r3, r4
 8001f64:	eb1a 0303 	adds.w	r3, sl, r3
 8001f68:	623b      	str	r3, [r7, #32]
 8001f6a:	462b      	mov	r3, r5
 8001f6c:	eb4b 0303 	adc.w	r3, fp, r3
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f7e:	4629      	mov	r1, r5
 8001f80:	028b      	lsls	r3, r1, #10
 8001f82:	4621      	mov	r1, r4
 8001f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f88:	4621      	mov	r1, r4
 8001f8a:	028a      	lsls	r2, r1, #10
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f94:	2200      	movs	r2, #0
 8001f96:	673b      	str	r3, [r7, #112]	; 0x70
 8001f98:	677a      	str	r2, [r7, #116]	; 0x74
 8001f9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f9e:	f7fe fd4f 	bl	8000a40 <__aeabi_uldivmod>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fac:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fce:	e0eb      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd0:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fdc:	4b35      	ldr	r3, [pc, #212]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d06b      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe8:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	2200      	movs	r2, #0
 8001ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ff2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffa:	663b      	str	r3, [r7, #96]	; 0x60
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	667b      	str	r3, [r7, #100]	; 0x64
 8002000:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002004:	4622      	mov	r2, r4
 8002006:	462b      	mov	r3, r5
 8002008:	f04f 0000 	mov.w	r0, #0
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	0159      	lsls	r1, r3, #5
 8002012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002016:	0150      	lsls	r0, r2, #5
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4621      	mov	r1, r4
 800201e:	1a51      	subs	r1, r2, r1
 8002020:	61b9      	str	r1, [r7, #24]
 8002022:	4629      	mov	r1, r5
 8002024:	eb63 0301 	sbc.w	r3, r3, r1
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002036:	4659      	mov	r1, fp
 8002038:	018b      	lsls	r3, r1, #6
 800203a:	4651      	mov	r1, sl
 800203c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002040:	4651      	mov	r1, sl
 8002042:	018a      	lsls	r2, r1, #6
 8002044:	4651      	mov	r1, sl
 8002046:	ebb2 0801 	subs.w	r8, r2, r1
 800204a:	4659      	mov	r1, fp
 800204c:	eb63 0901 	sbc.w	r9, r3, r1
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800205c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002060:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002064:	4690      	mov	r8, r2
 8002066:	4699      	mov	r9, r3
 8002068:	4623      	mov	r3, r4
 800206a:	eb18 0303 	adds.w	r3, r8, r3
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	462b      	mov	r3, r5
 8002072:	eb49 0303 	adc.w	r3, r9, r3
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002084:	4629      	mov	r1, r5
 8002086:	024b      	lsls	r3, r1, #9
 8002088:	4621      	mov	r1, r4
 800208a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800208e:	4621      	mov	r1, r4
 8002090:	024a      	lsls	r2, r1, #9
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800209a:	2200      	movs	r2, #0
 800209c:	65bb      	str	r3, [r7, #88]	; 0x58
 800209e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020a4:	f7fe fccc 	bl	8000a40 <__aeabi_uldivmod>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4613      	mov	r3, r2
 80020ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020b2:	e065      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x420>
 80020b4:	40023800 	.word	0x40023800
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c0:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	2200      	movs	r2, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	4611      	mov	r1, r2
 80020cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020d0:	653b      	str	r3, [r7, #80]	; 0x50
 80020d2:	2300      	movs	r3, #0
 80020d4:	657b      	str	r3, [r7, #84]	; 0x54
 80020d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80020da:	4642      	mov	r2, r8
 80020dc:	464b      	mov	r3, r9
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	0159      	lsls	r1, r3, #5
 80020e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ec:	0150      	lsls	r0, r2, #5
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4641      	mov	r1, r8
 80020f4:	1a51      	subs	r1, r2, r1
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	4649      	mov	r1, r9
 80020fa:	eb63 0301 	sbc.w	r3, r3, r1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800210c:	4659      	mov	r1, fp
 800210e:	018b      	lsls	r3, r1, #6
 8002110:	4651      	mov	r1, sl
 8002112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002116:	4651      	mov	r1, sl
 8002118:	018a      	lsls	r2, r1, #6
 800211a:	4651      	mov	r1, sl
 800211c:	1a54      	subs	r4, r2, r1
 800211e:	4659      	mov	r1, fp
 8002120:	eb63 0501 	sbc.w	r5, r3, r1
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	00eb      	lsls	r3, r5, #3
 800212e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002132:	00e2      	lsls	r2, r4, #3
 8002134:	4614      	mov	r4, r2
 8002136:	461d      	mov	r5, r3
 8002138:	4643      	mov	r3, r8
 800213a:	18e3      	adds	r3, r4, r3
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	464b      	mov	r3, r9
 8002140:	eb45 0303 	adc.w	r3, r5, r3
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002152:	4629      	mov	r1, r5
 8002154:	028b      	lsls	r3, r1, #10
 8002156:	4621      	mov	r1, r4
 8002158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800215c:	4621      	mov	r1, r4
 800215e:	028a      	lsls	r2, r1, #10
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002168:	2200      	movs	r2, #0
 800216a:	64bb      	str	r3, [r7, #72]	; 0x48
 800216c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800216e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002172:	f7fe fc65 	bl	8000a40 <__aeabi_uldivmod>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4613      	mov	r3, r2
 800217c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	0f1b      	lsrs	r3, r3, #28
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800218e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800219e:	e003      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80021a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	37b8      	adds	r7, #184	; 0xb8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	00f42400 	.word	0x00f42400

080021c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e28d      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8083 	beq.w	80022e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021e0:	4b94      	ldr	r3, [pc, #592]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d019      	beq.n	8002220 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021ec:	4b91      	ldr	r3, [pc, #580]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021f8:	4b8e      	ldr	r3, [pc, #568]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002204:	d00c      	beq.n	8002220 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002206:	4b8b      	ldr	r3, [pc, #556]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d112      	bne.n	8002238 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002212:	4b88      	ldr	r3, [pc, #544]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221e:	d10b      	bne.n	8002238 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	4b84      	ldr	r3, [pc, #528]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d05b      	beq.n	80022e4 <HAL_RCC_OscConfig+0x124>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d157      	bne.n	80022e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e25a      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d106      	bne.n	8002250 <HAL_RCC_OscConfig+0x90>
 8002242:	4b7c      	ldr	r3, [pc, #496]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7b      	ldr	r2, [pc, #492]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xcc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0xb4>
 800225a:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a75      	ldr	r2, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b73      	ldr	r3, [pc, #460]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a72      	ldr	r2, [pc, #456]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xcc>
 8002274:	4b6f      	ldr	r3, [pc, #444]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6e      	ldr	r2, [pc, #440]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b6c      	ldr	r3, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6b      	ldr	r2, [pc, #428]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7ff f9a2 	bl	80015dc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800229c:	f7ff f99e 	bl	80015dc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e21f      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b61      	ldr	r3, [pc, #388]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xdc>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7ff f98e 	bl	80015dc <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff f98a 	bl	80015dc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e20b      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b57      	ldr	r3, [pc, #348]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x104>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d06f      	beq.n	80023d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022f2:	4b50      	ldr	r3, [pc, #320]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d017      	beq.n	800232e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022fe:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002306:	2b08      	cmp	r3, #8
 8002308:	d105      	bne.n	8002316 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800230a:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d11c      	bne.n	800235c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002322:	4b44      	ldr	r3, [pc, #272]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	4b41      	ldr	r3, [pc, #260]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x186>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e1d3      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4937      	ldr	r1, [pc, #220]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	e03a      	b.n	80023d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d020      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCC_OscConfig+0x278>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7ff f937 	bl	80015dc <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002372:	f7ff f933 	bl	80015dc <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1b4      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	4b28      	ldr	r3, [pc, #160]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4925      	ldr	r1, [pc, #148]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x278>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff f916 	bl	80015dc <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b4:	f7ff f912 	bl	80015dc <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e193      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d036      	beq.n	800244c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d016      	beq.n	8002414 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7ff f8f6 	bl	80015dc <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff f8f2 	bl	80015dc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e173      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x234>
 8002412:	e01b      	b.n	800244c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7ff f8df 	bl	80015dc <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	e00e      	b.n	8002440 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002422:	f7ff f8db 	bl	80015dc <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d907      	bls.n	8002440 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e15c      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
 8002434:	40023800 	.word	0x40023800
 8002438:	42470000 	.word	0x42470000
 800243c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002440:	4b8a      	ldr	r3, [pc, #552]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ea      	bne.n	8002422 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8097 	beq.w	8002588 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245e:	4b83      	ldr	r3, [pc, #524]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	4b7f      	ldr	r3, [pc, #508]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a7e      	ldr	r2, [pc, #504]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	4b7c      	ldr	r3, [pc, #496]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002486:	2301      	movs	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	4b79      	ldr	r3, [pc, #484]	; (8002670 <HAL_RCC_OscConfig+0x4b0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d118      	bne.n	80024c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002496:	4b76      	ldr	r3, [pc, #472]	; (8002670 <HAL_RCC_OscConfig+0x4b0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a75      	ldr	r2, [pc, #468]	; (8002670 <HAL_RCC_OscConfig+0x4b0>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a2:	f7ff f89b 	bl	80015dc <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f7ff f897 	bl	80015dc <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e118      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <HAL_RCC_OscConfig+0x4b0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x31e>
 80024d0:	4b66      	ldr	r3, [pc, #408]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	4a65      	ldr	r2, [pc, #404]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6713      	str	r3, [r2, #112]	; 0x70
 80024dc:	e01c      	b.n	8002518 <HAL_RCC_OscConfig+0x358>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x340>
 80024e6:	4b61      	ldr	r3, [pc, #388]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a60      	ldr	r2, [pc, #384]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70
 80024f2:	4b5e      	ldr	r3, [pc, #376]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a5d      	ldr	r2, [pc, #372]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0x358>
 8002500:	4b5a      	ldr	r3, [pc, #360]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	4a59      	ldr	r2, [pc, #356]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
 800250c:	4b57      	ldr	r3, [pc, #348]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a56      	ldr	r2, [pc, #344]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002512:	f023 0304 	bic.w	r3, r3, #4
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d015      	beq.n	800254c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7ff f85c 	bl	80015dc <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	e00a      	b.n	800253e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002528:	f7ff f858 	bl	80015dc <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f241 3288 	movw	r2, #5000	; 0x1388
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0d7      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253e:	4b4b      	ldr	r3, [pc, #300]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0ee      	beq.n	8002528 <HAL_RCC_OscConfig+0x368>
 800254a:	e014      	b.n	8002576 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7ff f846 	bl	80015dc <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002552:	e00a      	b.n	800256a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7ff f842 	bl	80015dc <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0c1      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256a:	4b40      	ldr	r3, [pc, #256]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ee      	bne.n	8002554 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002576:	7dfb      	ldrb	r3, [r7, #23]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d105      	bne.n	8002588 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257c:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	4a3a      	ldr	r2, [pc, #232]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80ad 	beq.w	80026ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002592:	4b36      	ldr	r3, [pc, #216]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b08      	cmp	r3, #8
 800259c:	d060      	beq.n	8002660 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d145      	bne.n	8002632 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b33      	ldr	r3, [pc, #204]	; (8002674 <HAL_RCC_OscConfig+0x4b4>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff f816 	bl	80015dc <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff f812 	bl	80015dc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e093      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	071b      	lsls	r3, r3, #28
 80025fe:	491b      	ldr	r1, [pc, #108]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x4b4>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe ffe7 	bl	80015dc <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe ffe3 	bl	80015dc <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e064      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x452>
 8002630:	e05c      	b.n	80026ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_RCC_OscConfig+0x4b4>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe ffd0 	bl	80015dc <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe ffcc 	bl	80015dc <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e04d      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x480>
 800265e:	e045      	b.n	80026ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d107      	bne.n	8002678 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e040      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
 800266c:	40023800 	.word	0x40023800
 8002670:	40007000 	.word	0x40007000
 8002674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_RCC_OscConfig+0x538>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d030      	beq.n	80026e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d129      	bne.n	80026e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d122      	bne.n	80026e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026a8:	4013      	ands	r3, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d119      	bne.n	80026e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	3b01      	subs	r3, #1
 80026c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d10f      	bne.n	80026e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e041      	b.n	8002792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe fe6c 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3304      	adds	r3, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f000 f95e 	bl	80029fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d001      	beq.n	80027b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e046      	b.n	8002842 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a23      	ldr	r2, [pc, #140]	; (8002850 <HAL_TIM_Base_Start+0xb4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d022      	beq.n	800280c <HAL_TIM_Base_Start+0x70>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ce:	d01d      	beq.n	800280c <HAL_TIM_Base_Start+0x70>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_TIM_Base_Start+0xb8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d018      	beq.n	800280c <HAL_TIM_Base_Start+0x70>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <HAL_TIM_Base_Start+0xbc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_TIM_Base_Start+0x70>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_TIM_Base_Start+0xc0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00e      	beq.n	800280c <HAL_TIM_Base_Start+0x70>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_TIM_Base_Start+0xc4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d009      	beq.n	800280c <HAL_TIM_Base_Start+0x70>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <HAL_TIM_Base_Start+0xc8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_TIM_Base_Start+0x70>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <HAL_TIM_Base_Start+0xcc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d111      	bne.n	8002830 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b06      	cmp	r3, #6
 800281c:	d010      	beq.n	8002840 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	e007      	b.n	8002840 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40010000 	.word	0x40010000
 8002854:	40000400 	.word	0x40000400
 8002858:	40000800 	.word	0x40000800
 800285c:	40000c00 	.word	0x40000c00
 8002860:	40010400 	.word	0x40010400
 8002864:	40014000 	.word	0x40014000
 8002868:	40001800 	.word	0x40001800

0800286c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_TIM_ConfigClockSource+0x1c>
 8002884:	2302      	movs	r3, #2
 8002886:	e0b4      	b.n	80029f2 <HAL_TIM_ConfigClockSource+0x186>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c0:	d03e      	beq.n	8002940 <HAL_TIM_ConfigClockSource+0xd4>
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c6:	f200 8087 	bhi.w	80029d8 <HAL_TIM_ConfigClockSource+0x16c>
 80028ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ce:	f000 8086 	beq.w	80029de <HAL_TIM_ConfigClockSource+0x172>
 80028d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d6:	d87f      	bhi.n	80029d8 <HAL_TIM_ConfigClockSource+0x16c>
 80028d8:	2b70      	cmp	r3, #112	; 0x70
 80028da:	d01a      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0xa6>
 80028dc:	2b70      	cmp	r3, #112	; 0x70
 80028de:	d87b      	bhi.n	80029d8 <HAL_TIM_ConfigClockSource+0x16c>
 80028e0:	2b60      	cmp	r3, #96	; 0x60
 80028e2:	d050      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x11a>
 80028e4:	2b60      	cmp	r3, #96	; 0x60
 80028e6:	d877      	bhi.n	80029d8 <HAL_TIM_ConfigClockSource+0x16c>
 80028e8:	2b50      	cmp	r3, #80	; 0x50
 80028ea:	d03c      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0xfa>
 80028ec:	2b50      	cmp	r3, #80	; 0x50
 80028ee:	d873      	bhi.n	80029d8 <HAL_TIM_ConfigClockSource+0x16c>
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	d058      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x13a>
 80028f4:	2b40      	cmp	r3, #64	; 0x40
 80028f6:	d86f      	bhi.n	80029d8 <HAL_TIM_ConfigClockSource+0x16c>
 80028f8:	2b30      	cmp	r3, #48	; 0x30
 80028fa:	d064      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x15a>
 80028fc:	2b30      	cmp	r3, #48	; 0x30
 80028fe:	d86b      	bhi.n	80029d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002900:	2b20      	cmp	r3, #32
 8002902:	d060      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002904:	2b20      	cmp	r3, #32
 8002906:	d867      	bhi.n	80029d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002908:	2b00      	cmp	r3, #0
 800290a:	d05c      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x15a>
 800290c:	2b10      	cmp	r3, #16
 800290e:	d05a      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002910:	e062      	b.n	80029d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f000 f985 	bl	8002c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	609a      	str	r2, [r3, #8]
      break;
 800293e:	e04f      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f000 f96e 	bl	8002c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002962:	609a      	str	r2, [r3, #8]
      break;
 8002964:	e03c      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	461a      	mov	r2, r3
 8002974:	f000 f8e2 	bl	8002b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2150      	movs	r1, #80	; 0x50
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f93b 	bl	8002bfa <TIM_ITRx_SetConfig>
      break;
 8002984:	e02c      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6859      	ldr	r1, [r3, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	461a      	mov	r2, r3
 8002994:	f000 f901 	bl	8002b9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2160      	movs	r1, #96	; 0x60
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f92b 	bl	8002bfa <TIM_ITRx_SetConfig>
      break;
 80029a4:	e01c      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f000 f8c2 	bl	8002b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2140      	movs	r1, #64	; 0x40
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f91b 	bl	8002bfa <TIM_ITRx_SetConfig>
      break;
 80029c4:	e00c      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f000 f912 	bl	8002bfa <TIM_ITRx_SetConfig>
      break;
 80029d6:	e003      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      break;
 80029dc:	e000      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a40      	ldr	r2, [pc, #256]	; (8002b10 <TIM_Base_SetConfig+0x114>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <TIM_Base_SetConfig+0x40>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d00f      	beq.n	8002a3c <TIM_Base_SetConfig+0x40>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a3d      	ldr	r2, [pc, #244]	; (8002b14 <TIM_Base_SetConfig+0x118>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00b      	beq.n	8002a3c <TIM_Base_SetConfig+0x40>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <TIM_Base_SetConfig+0x11c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d007      	beq.n	8002a3c <TIM_Base_SetConfig+0x40>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3b      	ldr	r2, [pc, #236]	; (8002b1c <TIM_Base_SetConfig+0x120>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d003      	beq.n	8002a3c <TIM_Base_SetConfig+0x40>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3a      	ldr	r2, [pc, #232]	; (8002b20 <TIM_Base_SetConfig+0x124>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d108      	bne.n	8002a4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <TIM_Base_SetConfig+0x114>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d02b      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5c:	d027      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a2c      	ldr	r2, [pc, #176]	; (8002b14 <TIM_Base_SetConfig+0x118>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d023      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a2b      	ldr	r2, [pc, #172]	; (8002b18 <TIM_Base_SetConfig+0x11c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01f      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a2a      	ldr	r2, [pc, #168]	; (8002b1c <TIM_Base_SetConfig+0x120>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01b      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a29      	ldr	r2, [pc, #164]	; (8002b20 <TIM_Base_SetConfig+0x124>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d017      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <TIM_Base_SetConfig+0x128>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <TIM_Base_SetConfig+0x12c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00f      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a26      	ldr	r2, [pc, #152]	; (8002b2c <TIM_Base_SetConfig+0x130>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00b      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <TIM_Base_SetConfig+0x134>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a24      	ldr	r2, [pc, #144]	; (8002b34 <TIM_Base_SetConfig+0x138>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <TIM_Base_SetConfig+0x13c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d108      	bne.n	8002ac0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <TIM_Base_SetConfig+0x114>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d003      	beq.n	8002af4 <TIM_Base_SetConfig+0xf8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <TIM_Base_SetConfig+0x124>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d103      	bne.n	8002afc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	615a      	str	r2, [r3, #20]
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40010000 	.word	0x40010000
 8002b14:	40000400 	.word	0x40000400
 8002b18:	40000800 	.word	0x40000800
 8002b1c:	40000c00 	.word	0x40000c00
 8002b20:	40010400 	.word	0x40010400
 8002b24:	40014000 	.word	0x40014000
 8002b28:	40014400 	.word	0x40014400
 8002b2c:	40014800 	.word	0x40014800
 8002b30:	40001800 	.word	0x40001800
 8002b34:	40001c00 	.word	0x40001c00
 8002b38:	40002000 	.word	0x40002000

08002b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f023 0201 	bic.w	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 030a 	bic.w	r3, r3, #10
 8002b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0210 	bic.w	r2, r3, #16
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	031b      	lsls	r3, r3, #12
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	621a      	str	r2, [r3, #32]
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f043 0307 	orr.w	r3, r3, #7
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	609a      	str	r2, [r3, #8]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	021a      	lsls	r2, r3, #8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	609a      	str	r2, [r3, #8]
}
 8002c64:	bf00      	nop
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e05a      	b.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd4:	d01d      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10c      	bne.n	8002d2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40000c00 	.word	0x40000c00
 8002d5c:	40010400 	.word	0x40010400
 8002d60:	40014000 	.word	0x40014000
 8002d64:	40001800 	.word	0x40001800

08002d68 <__libc_init_array>:
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	4d0d      	ldr	r5, [pc, #52]	; (8002da0 <__libc_init_array+0x38>)
 8002d6c:	4c0d      	ldr	r4, [pc, #52]	; (8002da4 <__libc_init_array+0x3c>)
 8002d6e:	1b64      	subs	r4, r4, r5
 8002d70:	10a4      	asrs	r4, r4, #2
 8002d72:	2600      	movs	r6, #0
 8002d74:	42a6      	cmp	r6, r4
 8002d76:	d109      	bne.n	8002d8c <__libc_init_array+0x24>
 8002d78:	4d0b      	ldr	r5, [pc, #44]	; (8002da8 <__libc_init_array+0x40>)
 8002d7a:	4c0c      	ldr	r4, [pc, #48]	; (8002dac <__libc_init_array+0x44>)
 8002d7c:	f000 f820 	bl	8002dc0 <_init>
 8002d80:	1b64      	subs	r4, r4, r5
 8002d82:	10a4      	asrs	r4, r4, #2
 8002d84:	2600      	movs	r6, #0
 8002d86:	42a6      	cmp	r6, r4
 8002d88:	d105      	bne.n	8002d96 <__libc_init_array+0x2e>
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
 8002d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d90:	4798      	blx	r3
 8002d92:	3601      	adds	r6, #1
 8002d94:	e7ee      	b.n	8002d74 <__libc_init_array+0xc>
 8002d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9a:	4798      	blx	r3
 8002d9c:	3601      	adds	r6, #1
 8002d9e:	e7f2      	b.n	8002d86 <__libc_init_array+0x1e>
 8002da0:	08002df0 	.word	0x08002df0
 8002da4:	08002df0 	.word	0x08002df0
 8002da8:	08002df0 	.word	0x08002df0
 8002dac:	08002df4 	.word	0x08002df4

08002db0 <memset>:
 8002db0:	4402      	add	r2, r0
 8002db2:	4603      	mov	r3, r0
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d100      	bne.n	8002dba <memset+0xa>
 8002db8:	4770      	bx	lr
 8002dba:	f803 1b01 	strb.w	r1, [r3], #1
 8002dbe:	e7f9      	b.n	8002db4 <memset+0x4>

08002dc0 <_init>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr

08002dcc <_fini>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	bf00      	nop
 8002dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd2:	bc08      	pop	{r3}
 8002dd4:	469e      	mov	lr, r3
 8002dd6:	4770      	bx	lr
